# vivarium/utilities/src/path_utils.py
"""
Utility functions for resolving file and directory paths within the Vivarium project.
This module provides a robust way to locate resources relative to the project's root
directory, regardless of the current working directory.
"""

import os
import sys
import logging
from pathlib import Path

# CRITICAL: Import the top-level 'vivarium' package itself. This is used to
# reliably determine the project's root directory.
import vivarium

logger = logging.getLogger(__name__)


class PathUtils:
    """
    A utility class for fetching or constructing file and directory paths
    within the Vivarium project structure.
    """

    @classmethod
    def get_vivarium_package_root(cls) -> Path:
        """
        Determines and returns the absolute path to the root directory of the
        'vivarium' Python package.

        This method is robust as it relies on Python's module system to find
        the location of the `vivarium` package's `__init__.py` file.

        :returns: An absolute :class:`pathlib.Path` object pointing to the
                  'vivarium' package's root directory.
        :rtype: Path
        :raises FileNotFoundError: If the 'vivarium' package root cannot be reliably determined.
        """
        try:
            # vivarium.__file__ points to vivarium/__init__.py, so .parent gives vivarium/
            return Path(vivarium.__file__).parent.resolve()
        except (AttributeError, FileNotFoundError) as e:
            logger.critical(
                f"Could not determine vivarium package path via `vivarium.__file__` ({e}). "
                "Ensure 'vivarium' is a properly installed/importable package."
            )
            raise FileNotFoundError("Vivarium package root could not be determined.") from e

    @classmethod
    def get_resource_path(cls, relative_path_from_vivarium_root: str, must_exist: bool = True) -> Path:
        """
        Resolves a resource path (file or directory) to an absolute path,
        treating the input path as relative to the top-level 'vivarium' package directory.

        :param relative_path_from_vivarium_root: The path to the resource (file or folder),
                                                relative to the root directory of the
                                                'vivarium' Python package.
                                                (e.g., 'resources/postgres_schema.sql',
                                                'resources/processed_api_climatefiles').
        :type relative_path_from_vivarium_root: str
        :param must_exist: If :obj:`True`, raises a :class:`FileNotFoundError` if the
                           resolved path does not exist. Defaults to :obj:`True`.
        :type must_exist: bool
        :returns: An absolute :class:`pathlib.Path` object pointing to the resource.
        :rtype: Path
        :raises FileNotFoundError: If the specified resource does not exist and
                                   `must_exist` is :obj:`True`, or if the vivarium
                                   package root cannot be determined.
        """
        vivarium_package_root = cls.get_vivarium_package_root()
        absolute_path = vivarium_package_root / relative_path_from_vivarium_root
        
        if must_exist and not absolute_path.exists():
            raise FileNotFoundError(
                f"Resource not found at expected path: {absolute_path}. "
                f"Resolved from vivarium package root '{vivarium_package_root}' "
                f"with relative path '{relative_path_from_vivarium_root}'."
            )
        return absolute_path

    @classmethod
    def get_config_path(cls) -> Path:
        """
        Returns the absolute path to the main configuration file (config.ini).

        :returns: An absolute :class:`pathlib.Path` object for 'config.ini'.
        :rtype: Path
        :raises FileNotFoundError: If 'config.ini' is not found.
        """
        return cls.get_resource_path('config.ini', must_exist=True)

    @classmethod
    def get_config_secrets_path(cls) -> Path:
        """
        Returns the absolute path to the secrets configuration file (config_secrets.ini).

        :returns: An absolute :class:`pathlib.Path` object for 'config_secrets.ini'.
        :rtype: Path
        :raises FileNotFoundError: If 'config_secrets.ini' is not found.
        """
        return cls.get_resource_path('config_secrets.ini', must_exist=True)
    
    @classmethod
    def get_sql_script_path(cls, relative_path_from_vivarium_root: str) -> Path:
        """
        Resolves a SQL script path to an absolute path, treating the input path
        as relative to the top-level 'vivarium' package directory.

        :param relative_path_from_vivarium_root: The path to the SQL script file,
                                                relative to the root directory of the
                                                'vivarium' Python package.
                                                (e.g., 'resources/postgres_schema.sql').
        :type relative_path_from_vivarium_root: str
        :returns: An absolute :class:`pathlib.Path` object pointing to the SQL script file.
        :rtype: Path
        :raises FileNotFoundError: If the specified script file does not exist.
        """
        return cls.get_resource_path(relative_path_from_vivarium_root, must_exist=True)