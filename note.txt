GIT:

If git init, then add remote repository.
    git remote add origin your_remote_repo_url
        Replace your_remote_repo_url with the actual HTTPS or SSH URL of your Git repository 
        (e.g., https://github.com/your_username/your_project.git or 
        git@github.com:your_username/your_project.git).

    Note: If you previously tried to add origin and encountered an error like "remote origin already exists", you can either:
        Remove the old remote first: git remote remove origin
        Or, if you just want to update its URL: git remote set-url origin your_remote_repo_url

    Pull existing code from remote
        git pull origin main # Or 'master', depending on your remote's primary branch name

    Finally, verify git status
        git status

Else if not git init, then git clone.
    git clone https://github.com/someuser/my-amazing-project.git

    It creates a new directory (named after the repository by default) and downloads all the files and the entire history of the project into it.
    It automatically initializes a local Git repository within that new directory.
    Crucially, it automatically sets up a "remote" connection named origin that points back to the URL you cloned from. 
        This means you can immediately start using git pull origin main (or master) to get updates and git push origin main to send your changes back.

After the initial setup, daily workflow will typically involve:

Making changes to your code.
    git add . (to stage changes).
    git commit -m "Your descriptive commit message" (to save changes to your local history).
    git pull (to get any new changes from the remote that others might have pushed, and merge them with your local changes, avoiding conflicts).
    git push (to send your combined changes up to the remote).

The subsequent pull and push commands operate the same way, regardless of whether the repository was initially created with git clone 
or by initializing locally and adding a remote. The key is that the local repository is correctly configured to know about its remote counterpart.

systed setup:

list of commands:
sudo nano /etc/systemd/system/vivarium-scheduler.service
    [Unit]
    Description=Vivarium Automation Scheduler
    After=network.target multi-user.target postgresql.service

    [Service]
    User=ibis
    Group=ibis
    Environment="PYTHONPATH=/home/ibis/vivarium/.vivaenv/lib/python3.11/site-packages:/home/ibis/vivarium/"
    WorkingDirectory=/home/ibis/vivarium/
    ExecStart=/home/ibis/vivarium/.vivaenv/bin/python /home/ibis/vivarium/scheduler/src/vivariumscheduler.py
    Restart=on-failure
    StandardOutput=journal
    StandardError=journal
    ;comments
    ;StandardOutput=/var/log/vivarium-scheduler.log
    ;StandardError=/var/log/vivarium-scheduler-error.log
    ;Environment=PYTHONUNBUFFERED=1

    [Install]
    WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl enable vivarium-scheduler.service
sudo systemctl start vivarium-scheduler.service
sudo systemctl stop vivarium-scheduler.service
sudo systemctl restart vivarium-scheduler.service
sudo systemctl status vivarium-scheduler.service

journalctl -u vivarium-scheduler.service -f
journalctl -u vivarium-scheduler.service --since "2025-05-25 11:11:00" -x -e


